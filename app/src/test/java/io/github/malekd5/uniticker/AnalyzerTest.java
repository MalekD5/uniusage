/*
 * This source file was generated by the Gradle 'init' task
 */
package io.github.malekd5.uniticker;

import static org.junit.jupiter.api.Assertions.assertEquals;
import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.stream.Stream;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import io.github.malekd5.uniusage.core.analyzer.HLLAnalyzerService;
import io.github.malekd5.uniusage.core.report.HLLReportPrinter;
import io.github.malekd5.uniusage.thread.ThreadManager;

class AnalyzerTest {

    private final int precision = 18;

    private ThreadManager mockManager;
    private HLLAnalyzerService service;

    @BeforeEach
    void setUp() {
        mockManager = new ThreadManager();
        service = new HLLAnalyzerService(mockManager);
    }

    record ExpectedOperation(String operation, long userCount, double percentage) {
    }

    public record TestCase(String fileName, List<ExpectedOperation> expectedOperations) {
    }

    static Stream<Arguments> provideTestCases() {
        return Stream.of(
                Arguments.of(new TestCase(
                        "lg_log_file.log",
                        List.of(new ExpectedOperation("connect", 2251, 81.23),
                                new ExpectedOperation("filter-changed", 2217, 80.01))),

                        new TestCase("sm_log_file_1.log",
                                List.of(new ExpectedOperation("open-level2-price", 3,
                                        37.50),
                                        new ExpectedOperation("connect", 2, 25.0))),

                        new TestCase("sm_log_file_2.log", List.of(
                                new ExpectedOperation("open-dashboard", 2,
                                        50.0),
                                new ExpectedOperation("connect", 2, 50.0)))));
    }

    @ParameterizedTest
    @MethodSource("provideTestCases")
    void testHllAnalyzerLgLogFile(TestCase testCase) throws IOException, URISyntaxException {
        File file = this.get(testCase.fileName());

        var result = service.analyze(file, precision, 2);
        var topOps = result.topKOperations();

        long totalUsers = result.totalUsers();

        HLLReportPrinter.printReport(topOps, result.totalUsers(), 2, precision);

        assertEquals(2, topOps.size(), "Expected top 2 operations");

        int i = 0;
        for (ExpectedOperation exp : testCase.expectedOperations()) {
            var act = topOps.get(i++);

            assertEquals(exp.operation(), act.getKey());
            assertEquals(exp.userCount(), act.getValue().cardinality());
            assertEquals(exp.percentage(), act.getValue().cardinality() * 100.0 / totalUsers, 0.2);
        }
    }

    private File get(String fileName) throws URISyntaxException {
        URL resource = getClass().getClassLoader().getResource(fileName);

        Assertions.assertNotNull(resource);

        Path path = Paths.get(resource.toURI());
        return path.toFile();
    }

}
